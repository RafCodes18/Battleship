@page
@using HiddenBattleship.BL.Models;
@model Game
@{
    ViewBag.Title = "Playing Computer";
}

<style>
    * {
        margin: 0;
        padding: 0;
    }

    body {
        background-color: #e5e5e5;
        overflow: hidden;
    }

    .game-board {
        width: 400px;
        height: 400px;
        display: flex;
        flex-wrap: wrap; <!--
        fills the game boards with boxes -->
        outline: 1px solid black;
        background-color: #505050;
    }

    .ships-container {
        width: 500px;
        height: 80px;
        background-color: #b7c3c3;
        display: flex;
        align-items: center;
        margin-top: 5px;
        justify-content: space-around;
        border-radius: 20px;
        margin-left: 0px;
        margin-bottom: 2px;
    }

    #games-container {
        width: 1000px;
        display: flex;
        justify-content: space-between;
    }

    .ship1 {
        width: 40px;
        height: 20px;
        background-color: black;
        border-radius: 3px;
    }

    .ship2 {
        width: 60px;
        height: 20px;
        background-color: hotpink;
        border-radius: 3px;
    }

    .ship3 {
        width: 80px;
        height: 20px;
        background-color: blue;
        border-radius: 3px;
    }

    .ship4 {
        width: 100px;
        height: 20px;
        background-color: orange;
        border-radius: 3px;
    }

    .ship5 {
        width: 120px;
        height: 20px;
        background-color: purple;
        border-radius: 3px;
    }

    .block {
        width: 40px;
        height: 40px;
               border: 1px solid grey;              ;
        border-radius: 2px;

    }

    .hover {
        background-color: grey;
    }

    .empty {
        background-color: white;
    }

    .hero {
        display: flex;
        flex-direction: column;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .buttons {
        margin-top: 2px;
        margin-bottom: 2px;
    }


    button {
        padding: 5px;
        color: white;
        border-radius: 5px;
        background-color: #55d6be;
        font-size: large;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
        margin-right: 60px;
        margin-left: 20px;
        border: 1px solid grey;
        margin-bottom: 60px;
        margin-top:
    }

        button:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            background-color: #86e8d6;
        }

    .titles {
        display: flex;
        justify-content: space-around;
    }

    .your-board {
        margin-right: 230px;
        margin-left: -250px;
    }

    .strtBtn {
        margin-left: 20px;
        font-size: x-large;
        padding: 15px;
        margin-top: 0;
    }

    #btnFlip {
        background-color: #bf1fbf;
        margin-top: 0px;
        margin-bottom: 0;
    }

        #btnFlip:hover {
            background-color: #a550a5;
        }

    #computer .ship1,
    #computer .ship2,
    #computer .ship3,
    #computer .ship4,
    #computer .ship5{
/*         background-color: white;
 */
 background-color: #505050;

        
    }


    .boom {
        background-color: red !important;
    }

    .info{
        margin-top: 15px;
    }

    .opp-board{
        margin-left: 300px;
    }
</style>


<div class="hero">
    

    <div class="titles">
        <div class="your-board">Your Board</div>
        <div class="opp-board">Computer Board</div>
    </div>

    <div id="games-container">
    </div>

    <div class="info">Drag the ships below to your board.</div>
    <div class="ships-container">
        <div id="0" class="ship1" draggable="true"></div>
        <div id="1" class="ship2" draggable="true"></div>
        <div id="2" class="ship3" draggable="true"></div>
        <div id="3" class="ship4" draggable="true"></div>
        <div id="4" class="ship5" draggable="true"></div>
    </div>

    <div class="buttons">
        <button id="btnFlip">Flip Pieces</button>
    </div>
    <button id="btnStart" class="strtBtn" onclick="startGame()">Start Game</button>

</div>

<script>
    const shipContainer = document.querySelector('.ships-container')
    const btnFlip = document.querySelector('#btnFlip')
    const btnStart = document.querySelector('#btnStart')
    const gamesContainer = document.querySelector('#games-container')
    const infoDisplay = document.querySelector('#info');
    const turnDisplay = document.querySelector('#turn-display');

    let playerHits = [];
    let computerHits = [];

    const playerSunkShips = [];
    const computerSunkShips = [];

    let gameOver = false;
    let playerTurn;

    btnFlip.addEventListener('click', flip)

    let angle = 0;
    function flip() {
        const ships = Array.from(shipContainer.children)
        //if angle == 0, change to 90, else keep 0
        angle = angle === 0 ? 90 : 0
        //rotate all ships
        ships.forEach(ship => ship.style.transform = `rotate(${angle}deg)`)
    }


    //creating boards
    const width = 10;
    
    function createBoard(color, user) {
        const gameBoardContainer = document.createElement('div')
        gameBoardContainer.classList.add('game-board')
        //gameBoardContainer.style.backgroundColor = color
        gameBoardContainer.id = user

        //   loop to create 100 blocks in the game board
        for (let i = 0; i < width * width; i++) {
            const block = document.createElement('div');
            block.classList.add('block');
            block.id = i;
            gameBoardContainer.append(block);
        }

        gamesContainer.append(gameBoardContainer)
    }

    createBoard('#6B5B95', 'player')
    createBoard('#34568B', 'computer')

    class Ship {
        constructor(name, length) {
            this.name = name
            this.length = length
        }
    }

    const ship1 = new Ship('ship1', 2)
    const ship2 = new Ship('ship2', 3)
    const ship3 = new Ship('ship3', 3)
    const ship4 = new Ship('ship4', 4)
    const ship5 = new Ship('ship5', 5)

    const ships = [ship1, ship2, ship3, ship4, ship5]
    let notDropped;

    function getValidity(allBoardBlocks, isHorizontal, startIndex, ship) {
        //keep pieces inside the board
        // if ship is horizontal, check if its less than or == to 100 - ship length. if not, push it to valid pos
        let validStart = isHorizontal ? startIndex <= width * width - ship.length ? startIndex : width * width - ship.length :
            // handle vertical
            startIndex <= width * width - width * ship.length ? startIndex : startIndex - ship.length * width + width

        //array of ships
        let shipBlocks = []

        for (let i = 0; i < ship.length; i++) {
            if (isHorizontal) {
                shipBlocks.push(allBoardBlocks[Number(validStart) + i])
            } else {
                shipBlocks.push(allBoardBlocks[Number(validStart) + i * width])
            }
        }

        let valid;
        //make sure blocks dont overlap or split
        if (isHorizontal) {
            shipBlocks.every((_shipBlock, index) =>
                valid = shipBlocks[0].id % width !== width - (shipBlocks.length - (index + 1)))
        } else {
            shipBlocks.every((_shipBlock, index) =>
                valid = shipBlocks[0].id < 90 + (width * index + 1))
        }

        const notTaken = shipBlocks.every(shipBlock => !shipBlock.classList.contains('taken'))

        return { shipBlocks, valid, notTaken }
    }



    function addShipPiece(user, ship, startId) {
        const allBoardBlocks = document.querySelectorAll(`#${user} div`)
        let randomBoolean = Math.random() < 0.5
        let isHorizontal = user === 'player' ? angle === 0 : randomBoolean

        let randomStartIndex = Math.floor(Math.random() * width * width)
        let startIndex = startId ? startId : randomStartIndex

        const { shipBlocks, valid, notTaken } = getValidity(allBoardBlocks, isHorizontal, startIndex, ship);

        if (valid && notTaken) {
            shipBlocks.forEach(shipBlock => {
                shipBlock.classList.add(ship.name)
                shipBlock.classList.add('taken')
            })
        } else {
            if (user === 'computer') addShipPiece(user, ship, startId)
            if (user === 'player') notDropped = true
        }

    }
    ships.forEach(ship => addShipPiece('computer', ship))

    //drag player ships
    let draggedShip;
    const optionShips = Array.from(shipContainer.children)
    optionShips.forEach(ship => ship.addEventListener('dragstart', dragStart))

    const allPlayerBlocks = document.querySelectorAll('#player div')
    allPlayerBlocks.forEach(playerBlock => {
        playerBlock.addEventListener('dragover', dragOver)
        playerBlock.addEventListener('drop', dropShip)
    })

    function dragStart(e) {
        draggedShip = e.target
        notDropped = false
    }

    function dragOver(e) {
        e.preventDefault()
        const ship = ships[draggedShip.id]
        highlightArea(e.target.id, ship)
    }

    function dropShip(e) {
        const startId = e.target.id
        const ship = ships[draggedShip.id]
        addShipPiece('player', ship, startId)
        if (!notDropped) {
            draggedShip.remove()
        }
    }

    ships.forEach(ship => addShipPiece(ship))


    //add highlight
    function highlightArea(startIndex, ship) {
        const allBoardBlocks = document.querySelectorAll('#player div');
        let isHorizontal = angle === 0

        const { shipBlocks, valid, notTaken } = getValidity(allBoardBlocks, isHorizontal, startIndex, ship)

        if (valid && notTaken) {
            shipBlocks.forEach(ship => {
                ship.classList.add('hover')
                setTimeout(() => ship.classList.remove('hover'), 500)
            })
        }
    }

    function startGame() {
        // Add logic to start the game here        

        // Hide the "Flip Pieces" button
        if (btnStart.innerText == "End Game") {
            
            //End the game
            location.reload();

            btnStart.innerText = "Start Game";
            btnFlip.style.display = "block";
            btnStart.style = "background-color:#55d6be; ";
        } else {
                //only start game if pieces have been placed
                if (shipContainer.children.length != 0) {
                    infoDisplay.textContent = "Place your pieces to begin. "
                } else {
                    //now that pieces have been placed, start the game
                    let info = document.querySelector(".info");
                    info.textContent = "";
                    infoDisplay.textContent = "Begin! "
                    turnDisplay.textContent = "Your Turn"
                    playerTurn = true;

                    const allBoardBlocks = document.querySelectorAll('#computer div');
                    allBoardBlocks.forEach(block => block.addEventListener('click', handleClick));
                    

                    //change buttons to reflect state of game
                    btnFlip.style.display = 'none';
                    console.log("start game clicked");
                    btnStart.innerText = "End Game";
                    btnStart.style = "background-color: red;"
                }                       
        }
    }


    function handleClick(e) {
        if (!gameOver) {
            if (e.target.classList.contains('taken')) {
                e.target.classList.add('boom');
                infoDisplay.textContent = "You hit the computers ship!";

                let classes = Array.from(e.target.classList);
                classes = classes.filter(className => className !== 'block');
                classes = classes.filter(className => className !== 'boom');
                classes = classes.filter(className => className !== 'taken');

                playerHits.push(...classes)
                console.log(playerHits);
                checkScore('player', playerHits, playerSunkShips)
            }

            if (!e.target.classList.contains('taken')) {
                infoDisplay.textContent = "You missed!";
                e.target.classList.add('empty');
            }

            playerTurn = false;

            const allBoardBlocks = document.querySelectorAll('#computer div');
            allBoardBlocks.forEach(block => block.replaceWith(block.cloneNode(true)));
            setTimeout(computerGo, 3000);
        }
    }

    //Computer move logic
    function computerGo() {
        if (!gameOver) {
            turnDisplay.textContent = 'Computers turn!'
            infoDisplay.textContent = "Computer thinking...";

            setTimeout(() => {
                let randomGo = Math.floor(Math.random() * width * width);
                const allBoardBlocks = document.querySelectorAll('#player div');

                if (allBoardBlocks[randomGo].classList.contains('taken') &&
                    allBoardBlocks[randomGo].classList.contains('boom')) {
                    computerGo()
                    return;
                } else if (allBoardBlocks[randomGo].classList.contains('taken') &&
                    !allBoardBlocks[randomGo].classList.contains('boom')) {
                    allBoardBlocks[randomGo].classList.add('boom')
                    infoDisplay.textContent = 'Computer hit your ship!';

                    let classes = Array.from(allBoardBlocks[randomGo].classList);
                    classes = classes.filter(className => className !== 'block');
                    classes = classes.filter(className => className !== 'boom');
                    classes = classes.filter(className => className !== 'taken');

                    computerHits.push(...classes);
                    checkScore('computer', computerHits, computerSunkShips)


                } else {
                    infoDisplay.textContent = "Computer missed!";
                    allBoardBlocks[randomGo].classList.add('empty');
                }
            }, 2000);

            setTimeout(() => {
                playerTurn = true;
                turnDisplay.textContent = "Your turn!";
                infoDisplay.textContent = "Make your move. ";

                const allBoardBlocks = document.querySelectorAll('#computer div')
                     allBoardBlocks.forEach(block => block.addEventListener('click', handleClick));
            }, 3000)
        }
    }

    function checkScore(user, userHits, userSunkShips) { 
        function checkShip(shipName1, shipLength) {
            if (
                userHits.filter(storedShipName => storedShipName === shipName1).length === shipLength
            ) {
                var shipName; 
                if (user === 'player') {
                    switch (shipName1) {
                        case 'ship1':
                            shipName = `smallest ship!`;
                            break;
                        case 'ship2':
                            shipName = "second smallest ship!";
                            break;
                        case 'ship3':
                            shipName = "third largest ship!";
                            break;
                        case 'ship4':
                            shipName = "second largest ship!";
                            break;
                        case 'ship5':
                            shipName = "largest ship!";
                            break;
                        default:
                            break;                            
                    }
                    infoDisplay.textContent = `You sunk the computers ${shipName}`;
                    playerHits = userHits.filter(storedShipName => storedShipName !== shipName1)
                }
                if (user === 'computer') {
                    infoDisplay.textContent = `The computer sunk your ${shipName}`;
                    computerHits = userHits.filter(storedShipName => storedShipName !== shipName1)
                }
                userSunkShips.push(shipName1);
            }
        }

        checkShip('ship1', 2)
        checkShip('ship2', 3)
        checkShip('ship3', 3)
        checkShip('ship4', 4)
        checkShip('ship5', 5)
 
        console.log('player hits', playerHits)
        console.log('player sunk ships', playerSunkShips)

        if (playerSunkShips.length === 5) {
            infoDisplay.textContent = 'You sunk all computer ships. You WIN!';
            infoDisplay.style = "font-weight: y00;";
            infoDisplay.style = "color:#4EB300 !important";
            gameOver = true;
        }
        if (computerSunkShips.length === 5) {
            infoDisplay.textContent = 'The computer sunk all your ships. You LOSE!';
            gameOver = true;
        }
    }
    
</script> 