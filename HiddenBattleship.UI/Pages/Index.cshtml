@page
@model IndexModel
@{
    ViewData["Title"] = "Play Game";
}

<style>
    * {
        margin: 0;
        padding: 0;
    }

    body{
        background-color: #e5e5e5;
    }

    .game-board {
        width: 200px;
        height: 200px;
        display: flex;
        flex-wrap: wrap; <!--
        fills the game boards with boxes -->
    }

    .ships-container {
        width: 500px;
        height: 80px;
        background-color: #7ba0a0;
        display: flex;
        align-items: center;
        margin-top: 5px;
        justify-content: space-around;
    }

    #games-container {
        width: 500px;
        display: flex;
        justify-content: space-between;
    }

    .ship1 {
        width: 20px;
        height: 10px;
        background-color: black;
    }

    .ship2 {
        width: 30px;
        height: 10px;
        background-color: red;
    }

    .ship3 {
        width: 40px;
        height: 10px;
        background-color: blue;
    }

    .ship4 {
        width: 50px;
        height: 10px;
        background-color: orange;
    }

    .ship5 {
        width: 60px;
        height: 10px;
        background-color: purple;
    }

    .block {
        width: 20px;
        height: 20px;
        /*        border: 1px solid black; */
    }

    .hover {
        background-color: grey;
    }

    .boom {
        background-color: red;
    }

    .empty {
        background-color: grey;
    }

    .hero{
        display: flex;
        flex-direction: column;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .buttons{
        margin-top: 20px;
    }

    .game-info {
        text-align: left; /* Align text to the left */
       
        margin-left: -300px; /* Add some margin to the left for spacing */
    }

    button{
        padding: 5px;
        color: white;
        border-radius: 5px;
        background-color: #55d6be;
        font-size: x-large;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
        margin-right: 20px;
        border: 1px solid grey;
    }

    button:hover {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Adjust the values for the hover state */
    }
    .titles{
        display: flex;
        justify-content:space-around;
    }
    .your-board{
        margin-right: 230px;
        margin-left: -100px;
    }
</style>


<div class="hero">
<div id="game-info" class="game-info">
    <p>Turn: <span id="turn-display"></span></p>
    <p>Info: <span id="info"></span></p>
</div>

<div class="titles">
        <div class="your-board">Your Board</div>
        <div class="opp-board">Opponent</div>
</div>

<div id="games-container">
    
</div>

<div class="ships-container">
    <div id="0" class="ship1" draggable="true"></div>
    <div id="1" class="ship2" draggable="true"></div>
    <div id="2" class="ship3" draggable="true"></div>
    <div id="3" class="ship4" draggable="true"></div>
    <div id="4" class="ship5" draggable="true"></div>
</div>

<div class="buttons">
<button id="btnFlip">Flip Pieces</button>
<button id="btnStart">Start Game</button>
</div>

</div>

<script>
    const shipContainer = document.querySelector('.ships-container')
    const btnFlip = document.querySelector('#btnFlip')
    const gamesContainer = document.querySelector('#games-container')

    btnFlip.addEventListener('click', flip)

    let angle = 0;
    function flip() {
        const ships = Array.from(shipContainer.children)
        //if angle == 0, change to 90, else keep 0
        angle = angle === 0 ? 90 : 0
        //rotate all ships
        ships.forEach(ship => ship.style.transform = `rotate(${angle}deg)`)
    }


    //creating boards
    const width = 10;
    function createBoard(color, user) {
        const gameBoardContainer = document.createElement('div')
        gameBoardContainer.classList.add('game-board')
        gameBoardContainer.style.backgroundColor = color
        gameBoardContainer.id = user

        for (let i = 0; i < width * width; i++) {
            const block = document.createElement('div');
            block.classList.add('block');
            block.id = i;
            gameBoardContainer.append(block);
        }

        gamesContainer.append(gameBoardContainer)
    }

    createBoard('#6B5B95', 'player')
    createBoard('#34568B', 'computer')

    class Ship {
        constructor(name, length) {
            this.name = name
            this.length = length
        }
    }

    const ship1 = new Ship('ship1', 2)
    const ship2 = new Ship('ship2', 3)
    const ship3 = new Ship('ship3', 3)
    const ship4 = new Ship('ship4', 4)
    const ship5 = new Ship('ship5', 5)

    const ships = [ship1, ship2, ship3, ship4, ship5]
    let notDropped;

    function getValidity(allBoardBlocks, isHorizontal, startIndex, ship) {
        //keep pieces inside the board
        // if ship is horizontal, check if its less than or == to 100 - ship length. if not, push it to valid pos
        let validStart = isHorizontal ? startIndex <= width * width - ship.length ? startIndex : width * width - ship.length :
            // handle vertical
            startIndex <= width * width - width * ship.length ? startIndex : startIndex - ship.length * width + width

        //array of ships
        let shipBlocks = []

        for (let i = 0; i < ship.length; i++) {
            if (isHorizontal) {
                shipBlocks.push(allBoardBlocks[Number(validStart) + i])
            } else {
                shipBlocks.push(allBoardBlocks[Number(validStart) + i * width])
            }
            console.log(shipBlocks)
        }

        let valid;
        //make sure blocks dont overlap or split
        if (isHorizontal) {
            shipBlocks.every((_shipBlock, index) =>
                valid = shipBlocks[0].id % width !== width - (shipBlocks.length - (index + 1)))
        } else {
            shipBlocks.every((_shipBlock, index) =>
                valid = shipBlocks[0].id < 90 + (width * index + 1))
        }

        const notTaken = shipBlocks.every(shipBlock => !shipBlock.classList.contains('taken'))

        return { shipBlocks, valid, notTaken }
    }



    function addShipPiece(user, ship, startId) {
        const allBoardBlocks = document.querySelectorAll(`#${user} div`)
        let randomBoolean = Math.random() < 0.5
        let isHorizontal = user === 'player' ? angle === 0 : randomBoolean

        let randomStartIndex = Math.floor(Math.random() * width * width)
        console.log(randomStartIndex)

        let startIndex = startId ? startId : randomStartIndex

        const { shipBlocks, valid, notTaken } = getValidity(allBoardBlocks, isHorizontal, startIndex, ship);

        if (valid && notTaken) {
            shipBlocks.forEach(shipBlock => {
                shipBlock.classList.add(ship.name)
                shipBlock.classList.add('taken')
            })
        } else {
            if (user === 'computer') addShipPiece(user, ship, startId)
            if (user === 'player') notDropped = true
        }

    }
    ships.forEach(ship => addShipPiece('computer', ship))

    //drag player ships
    let draggedShip;
    const optionShips = Array.from(shipContainer.children)
    optionShips.forEach(ship => ship.addEventListener('dragstart', dragStart))

    const allPlayerBlocks = document.querySelectorAll('#player div')
    allPlayerBlocks.forEach(playerBlock => {
        playerBlock.addEventListener('dragover', dragOver)
        playerBlock.addEventListener('drop', dropShip)
    })

    function dragStart(e) {
        draggedShip = e.target
        notDropped = false
    }

    function dragOver(e) {
        e.preventDefault()
        const ship = ships[draggedShip.id]
        highlightArea(e.target.id, ship)
    }

    function dropShip(e) {
        const startId = e.target.id
        const ship = ships[draggedShip.id]
        addShipPiece('player', ship, startId)
        if (!notDropped) {
            draggedShip.remove()
        }
    }

    ships.forEach(ship => addShipPiece(ship))


    //add highlight
    function highlightArea(startIndex, ship) {
        console.log("highlightArea: ");
        const allBoardBlocks = document.querySelectorAll('#player div');
        let isHorizontal = angle === 0

        const { shipBlocks, valid, notTaken } = getValidity(allBoardBlocks, isHorizontal, startIndex, ship)

        if (valid && notTaken) {
            shipBlocks.forEach(ship => {
                ship.classList.add('hover')
                setTimeout(() => ship.classList.remove('hover', 500))
            })
        }
    }

</script>