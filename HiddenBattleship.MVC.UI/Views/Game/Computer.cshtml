@using HiddenBattleship.BL.Models;
@using Microsoft.AspNet.SignalR.Client
@model Game  
@{
    ViewBag.Title = "Playing Computer";
}
@inject IHttpContextAccessor HttpContextAccessor


<style>
 

    body {
        background-color: #e5e5e5;
        overflow: hidden;
    }

    .game-board {
        width: 400px;
        height: 400px;
        display: flex;
        flex-wrap: wrap; <!--
        fills the game boards with boxes -->
        outline: 1px solid black;
        background-color: #505050;
    }

    .ships-container {
        width: 500px;
        height: 120px;
        background-color: #758184;
        display: flex;
        align-items: center;
        margin-top: 5px;
        justify-content: space-around;
        border-radius: 20px;
        margin-left: 0px;
        margin-bottom: 2px;
    }

    #games-container {
        width: 1000px;
        display: flex;
        justify-content: space-between;
    }

    .ship1 {
        width: 40px;
        height: 20px;
        background-color: #C04DFF;
        border-radius: 3px;
        border: 1px solid black;
    }

    .ship2 {
        width: 60px;
        height: 20px;
        background-color: #FF00AA;
        border-radius: 3px;
        border: 1px solid black;
    }

    .ship3 {
        width: 80px;
        height: 20px;
        background-color: #24E0FF;
        border-radius: 3px;
        border: 1px solid black;
    }

    .ship4 {
        width: 100px;
        height: 20px;
        background-color: orange;
        border-radius: 3px;
        border: 1px solid black;
    }

    .ship5 {
        width: 120px;
        height: 20px;
        background-color: #E2E603;
        border-radius: 3px;
        border: 1px solid black;
    }

    .block {
        width: 40px;
        height: 40px;
               border: 1px solid grey;              ;
        border-radius: 2px;
        

    }

    .hover {
        background-color: grey;
    }

    .empty {
        background-color: white;
    }

    .hero {
        display: flex;
        flex-direction: column;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .buttons {
        margin-top: 2px;
        margin-bottom: 2px;
    }


    button {
        padding: 2px;
        color: black;
        border-radius: 5px;
        background-color: #50ee83;
        font-size: large;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
        margin-right: 60px;
        margin-left: 20px;
        border: 1px solid grey;
        margin-bottom: 60px;
       
    }

        button:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            background-color: #25a467;
        }

    .titles {
        display: flex;
        justify-content: space-around;
    }

    .your-board {
        margin-right: 230px;
        margin-left: -250px;
        color: white;
        font-weight: bold;
        font-size: large;
    }

    .strtBtn {
        margin-left: 20px;
        font-size: xx-large;
        padding: 5px;
        margin-top: 2px;
        position: absolute;
        left: auto;
        margin-left: 60px;
     }

    #btnFlip {
        background-color: #bf1fbf;
        margin-top: 25px;
        margin-bottom: 0;
    }

        #btnFlip:hover {
            background-color: #a550a5;
        }

    #computer .ship1,
    #computer .ship2,
    #computer .ship3,
    #computer .ship4,
    #computer .ship5{
/*         background-color: white;
 */
 background-color: #505050;

        
    }


    .boom {
        background-color: red !important;
    }

    .info{
        margin-top: 15px;
        color: white;
        font-weight: bold;
        margin-right: 700px;
        margin-top: 20px;
    }

    .opp-board{
        margin-left: 300px;
        color: white;
        font-weight: bold;
        font-size: large;
    }

    .game-info {
        text-align: left;
        display: flex;
        margin-left: auto;
        align-content: center;
        font-size: xx-large;
        white-space: nowrap;
        color: #d8f878;
        position: absolute;
        top: 20px;
    }

    .turn {
        margin-right: 80px;
    }

    .bottoms-bot{
        display: flex;
    }

    #message-container {
        max-height: 110px;  
        overflow-y: auto;  
        border: 1px solid #ccc;  
        padding: 10px; 
        background-color: #999897;
        border-radius: 10PX;
        margin-top: -30px;
    }

    .chat-text{

    }

    .opponent{
        margin-left: 140px;
        color: black;
    }

    .user{
        color: white;
    }

    .txt-input{
        border-radius: 7px;
        padding: 10px;
        margin-top: 13px;
        width: 250px !important;
    }
 
 .snd-msg{
     padding: 3px 14px;    
     margin-left: -3px;
 }

 .wht-box{
     width: 30px;
     height: 30px; 
     background-color: white;
     border: 2px solid grey;
 }
 .desc{
     color: white;
 }
 .color-info-container{
      margin-left: -90px;
      margin-bottom: -20px;
  }

 .red-box{
        width: 30px;
        height: 30px;
        background-color: red;
        border: 2px solid grey;
 }

 .space{
     margin: 20px;
 }

 .ci-cont{
    display: flex;
 }
</style>

<div class="color-info-container">
    <div class="ci-cont">
        <div class="wht-box"></div> s<p class="desc"> = miss</p> <span class="space"></span>
        <div class="red-box"></div> s<p class="desc"> = hit</p>
    </div>
</div>
<div class="hero">
    <!--Game Info In Navbar-->
      <div id="game-info" class="game-info">
                        <p class="turn"><span id="turn-display"></span></p>
                        <p><span id="info"></span></p>
      </div>

    <!--Board Titles-->
    <div class="titles">
        <div class="your-board">Your Board</div>
        <div class="opp-board">Computer Board</div>
    </div>

    <!--Game boards-->
    <div id="games-container">
    </div>
    <button id="btnStart" class="strtBtn" onclick="startGame()">start game</button>


    <!--Ships containers-->
    <div class="info">Drag the ships below to your board.</div>   
    <div class="bottoms-bot">
        <div class="ships-container">
            <div id="0" class="ship1" draggable="true"></div>
            <div id="1" class="ship2" draggable="true"></div>
            <div id="2" class="ship3" draggable="true"></div>
            <div id="3" class="ship4" draggable="true"></div>
            <div id="4" class="ship5" draggable="true"></div>
        </div>
       
        <div class="buttons">
            <button id="btnFlip">Flip Pieces</button>
        </div>


    <!--Messaging-->
    <div class="msg">

    
        <div id="message-container">
                <p class="chat-text opponent">@@Michael: Hi where are you from?</p>
                <p class="chat-text user">you: Toronto, CA. Wbu?</p>
                <p class="chat-text opponent">@@Michael: Nice! I'm from New York</p>
              
                @if(Model.player != null)
                {
                    <p>@Model.player.UserName</p>

                }
        </div>

        <div>
            <input type="text" id="messageInput" placeholder="Type here, press enter to send" class="txt-input"/>
            <button onclick="sendMessage()" class="snd-msg">Send</button>

        
        </div>
    </div>

</div>
<!--Reference the SignalR library. -->
<script src="~/Scripts/jquery.signalR-2.1.0.min.js"></script>
<!--Reference SignalR hub script. -->
<script src="~/signalr/hubs"></script>

<script src="~/lib/signalr/signalr.js"></script>


<script>
    //logic for chat 
    // p elements have classes for user and opponent. 
    // user is styled for the client browser, opponent styled to represent an opponent
    // response from server represents opponents chat
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")  // Make sure this matches your Hub setup
        .build();

    connection.start().then(() => {
        // ... your connection success logic here ...
    }).catch(err => console.error(err));

    // Listener for incoming messages
    connection.on("ReceiveMessage", (user, message) => {
        const msg = user + ": " + message;
        const msgElement = document.createElement("p");
        msgElement.classList.add("chat-text", "user", "mainColor"); // Add classes for styling
        msgElement.textContent = msg;
        document.getElementById("message-container").appendChild(msgElement);
            const messageContainer = document.getElementById('message-container');
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });



    // Send message on button click
    function sendMessage() {
 
        const user = "you" ; // How will you get the actual username?
        const messageInput = document.getElementById("messageInput");
        const message = messageInput.value;
        messageInput.value = ''; // Clear the input after sending

        connection.invoke("SendMessage", user, message)
            .catch(err => console.error(err));
    }
        
        //force message box to show most recent msg
        const messageContainer = document.getElementById('message-container');
        messageContainer.scrollTop = messageContainer.scrollHeight;


        document.querySelector('#messageInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    </script> 